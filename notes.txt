Need a little reorganization.
Needs optomization and some structural changes. 
Currently a bit messy.


TO ADD - 
    - Add a way to render numbers and letters.
    - Basic Shape dimensions
    - Shape nester
    - 3D support
    - Other file types (STP, STL, ETC)
    - File Converter (DWG -> STP etc) Probably use some sort of IR for this.
    - add swizzling
    

    Parse the DXF file and extract the extrusion vector: The extrusion vector is a normal vector to the base plane of a planar entity. It is usually stored as a 3D vector in the DXF file.
let extrusion_vector = [0.8907951627859745, -0.0659739887935157, -0.4495902698677794];
let point_xyz = [292.6949715389058, 58.91690693849874, 116.0505716044619];

let ax;
if (Math.abs(extrusion_vector[0]) < 1/64 && Math.abs(extrusion_vector[1]) < 1/64) {
    ax = crossProduct([0,0,1], extrusion_vector);
} else {
    ax = crossProduct([0,1,0], extrusion_vector);
}

let mx = Math.sqrt(ax.reduce((a, b) => a + b * b, 0)); // calculate magnitude of ax
ax = ax.map(x => x / mx); // scale ax to have magnitude 1

let ay = crossProduct(extrusion_vector, ax);
let az = extrusion_vector;

let rotation_matrix = [ax, ay, az]; // Building the rotation matrix from the direction cosines.

let xyz = multiplyMatrixAndPoint(rotation_matrix, point_xyz); // Multiply rotation matrix and point

function crossProduct(a, b) {
    return [a[1] * b[2] - a[2] * b[1],
     a[2] * b[0] - a[0] * b[2], 
     a[0] * b[1] - a[1] * b[0]];
}

function multiplyMatrixAndPoint(matrix, point) {
    let result = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            result[i] += matrix[i][j] * point[j];
        }
    }
    return result;
}